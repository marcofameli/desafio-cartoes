package com.desafio.tecnico.configurationimport io.swagger.v3.oas.models.examples.Exampleimport io.swagger.v3.oas.models.info.Infoimport io.swagger.v3.oas.models.media.Contentimport io.swagger.v3.oas.models.media.MediaTypeimport io.swagger.v3.oas.models.media.Schemaimport io.swagger.v3.oas.models.responses.ApiResponseimport org.springdoc.core.customizers.OpenApiCustomizerimport org.springframework.context.annotation.Beanimport org.springframework.context.annotation.Configurationimport org.springframework.http.HttpStatusimport java.time.LocalDateTimeimport java.math.BigDecimal@Configurationclass SwaggerConfig {    @Bean    fun openApiCustomizer(): OpenApiCustomizer {        return OpenApiCustomizer { openApi ->            openApi.info(                Info()                    .title("API de Solicitação de Cartões")                    .version("1.0.0")                    .description("API para verificação de elegibilidade e solicitação de cartões")            )            // Configuração do request body example            openApi.paths.getOrDefault("/cartoes", null)?.post?.requestBody?.content = Content().apply {                addMediaType("application/json", MediaType().apply {                    examples = mapOf(                        "exemplo1" to Example().apply {                            summary = "Exemplo de Cliente"                            value = mapOf(                                "cliente" to mapOf(                                    "nome" to "Cliente Teste",                                    "cpf" to "123.456.789-10",                                    "idade" to 25,                                    "data_nascimento" to "2000-01-01",                                    "uf" to "SP",                                    "renda_mensal" to 4000,                                    "email" to "cliente@teste.com",                                    "telefone_whatsapp" to "11999992020"                                )                            )                        }                    )                })            }            openApi.paths.getOrDefault("/cartoes", null)?.post?.responses?.apply {                remove(HttpStatus.OK.toString())                addApiResponse(HttpStatus.OK.toString(), ApiResponse().apply {                    description = "Solicitação processada com sucesso"                    content = Content().apply {                        addMediaType("application/json", MediaType().apply {                            // Usando exemplos no formato correto                            examples = mapOf(                                "exemploSucesso" to Example().apply {                                    summary = "Exemplo de resposta de sucesso"                                    value = mapOf(                                        "numero_solicitacao" to "3fa85f64-5717-4562-b3fc-2c963f66afa6",                                        "data_solicitacao" to LocalDateTime.now().toString(),                                        "cliente" to mapOf(                                            "nome" to "Cliente Teste",                                            "cpf" to "123.456.789-10",                                            "idade" to 25,                                            "data_nascimento" to "2000-01-01",                                            "uf" to "SP",                                            "renda_mensal" to 4000,                                            "email" to "cliente@teste.com",                                            "telefone_whatsapp" to "11999992020"                                        ),                                        "cartoes_ofertados" to listOf(                                            mapOf(                                                "tipoCartao" to "CARTAO_SEM_ANUIDADE",                                                "valor_anuidade_mensal" to 0,                                                "valor_limite_disponivel" to 1000,                                                "status" to "APROVADO"                                            )                                        )                                    )                                }                            )                            schema = Schema<Any>().apply {                                type = "object"                                properties = mapOf(                                    "numero_solicitacao" to Schema<Any>().apply {                                        type = "string"                                        format = "uuid"                                    },                                    "data_solicitacao" to Schema<Any>().apply {                                        type = "string"                                        format = "date-time"                                    },                                    "cliente" to Schema<Any>().apply {                                        type = "object"                                        properties = mapOf(                                            "nome" to Schema<Any>().apply { type = "string" },                                            "cpf" to Schema<Any>().apply { type = "string" },                                            "idade" to Schema<Any>().apply { type = "integer" },                                            "data_nascimento" to Schema<Any>().apply {                                                type = "string"                                                format = "date"                                            },                                            "uf" to Schema<Any>().apply { type = "string" },                                            "renda_mensal" to Schema<Any>().apply { type = "number" },                                            "email" to Schema<Any>().apply { type = "string" },                                            "telefone_whatsapp" to Schema<Any>().apply { type = "string" }                                        )                                    },                                    "cartoes_ofertados" to Schema<Any>().apply {                                        type = "array"                                        items = Schema<Any>().apply {                                            type = "object"                                            properties = mapOf(                                                "tipoCartao" to Schema<Any>().apply { type = "string" },                                                "valor_anuidade_mensal" to Schema<Any>().apply { type = "number" },                                                "valor_limite_disponivel" to Schema<Any>().apply { type = "number" },                                                "status" to Schema<Any>().apply { type = "string" }                                            )                                        }                                    }                                )                            }                        })                    }                })                addApiResponse(HttpStatus.NO_CONTENT.toString(), ApiResponse().apply {                    description = "Solicitação processada sem cartões elegíveis"                    content = Content().apply {                        addMediaType("application/json", MediaType().apply {                            examples = mapOf(                                "requestExemplo" to Example().apply {                                    summary = "Requisição sem cartões elegíveis"                                    value = mapOf(                                        "cliente" to mapOf(                                            "nome" to "Cliente Baixa Renda",                                            "cpf" to "123.456.789-10",                                            "idade" to 25,                                            "data_nascimento" to "2000-01-01",                                            "uf" to "SP",                                            "renda_mensal" to 1,                                            "email" to "cliente@teste.com",                                            "telefone_whatsapp" to "11999992020"                                        )                                    )                                }                            )                        })                    }                })                addApiResponse(HttpStatus.BAD_REQUEST.toString(), ApiResponse().apply {                    description = "Dados inválidos"                    content = Content().apply {                        addMediaType("application/json", MediaType().apply {                            examples = mapOf(                                "requestExemplo" to Example().apply {                                    summary = "Requisição com dados inválidos"                                    value = mapOf(                                        "cliente" to mapOf(                                            "nome" to "",                                            "cpf" to "12310",                                            "idade" to -5,                                            "data_nascimento" to "3000-01-0",                                            "uf" to "XX",                                            "renda_mensal" to -1000,                                            "email" to "emado",                                            "telefone_whatsapp" to "11"                                        )                                    )                                },                                "responseExemplo" to Example().apply {                                    summary = "Resposta de erro"                                    value = mapOf(                                        "codigo" to "400",                                        "mensagem" to "Requisição Inválida",                                        "detalhe_erro" to mapOf(                                            "app" to "Cartoes",                                            "tipo_erro" to "DADOS_INVALIDOS",                                            "mensagem_interna" to "Os dados informados são inválidos. Verifique os campos obrigatórios e formatos esperados"                                        )                                    )                                }                            )                        })                    }                })                addApiResponse(HttpStatus.UNPROCESSABLE_ENTITY.toString(), ApiResponse().apply {                    description = "Regra de negócio não atendida"                    content = Content().apply {                        addMediaType("application/json", MediaType().apply {                            examples = mapOf(                                "requestExemplo" to Example().apply {                                    summary = "Requisição que viola regra de negócio"                                    value = mapOf(                                        "cliente" to mapOf(                                            "nome" to "Cliente Jovem",                                            "cpf" to "123.456.789-10",                                            "idade" to 17,                                            "data_nascimento" to "2007-01-01",                                            "uf" to "SP",                                            "renda_mensal" to 500,                                            "email" to "cliente@teste.com",                                            "telefone_whatsapp" to "11999992020"                                        )                                    )                                },                                "responseExemplo" to Example().apply {                                    summary = "Resposta de erro"                                    value = mapOf(                                        "codigo" to "422",                                        "mensagem" to "Regra de Negócio Não Atendida",                                        "detalhe_erro" to mapOf(                                            "app" to "Cartoes",                                            "tipo_erro" to "REGRA_NEGOCIO_NAO_ATENDIDA",                                            "mensagem_interna" to "Regra de Negócio Não Atendida"                                        )                                    )                                }                            )                        })                    }                })                addApiResponse(HttpStatus.INTERNAL_SERVER_ERROR.toString(), ApiResponse().apply {                    description = "Erro interno do servidor"                    content = Content().apply {                        addMediaType("application/json", MediaType().apply {                            examples = mapOf(                                "requestExemplo" to Example().apply {                                    summary = "Requisição que causou erro interno"                                    value = mapOf(                                        "cliente" to mapOf(                                            "nome" to "Cliente",                                            "cpf" to "111.222.333-44",                                            "idade" to 25,                                            "data_nascimento" to "1998-01-01",                                            "uf" to "SP",                                            "renda_mensal" to "400000000000000000000",                                            "email" to "cliente@valido.com",                                            "telefone_whatsapp" to "11999992020"                                        )                                    )                                },                                "responseExemplo" to Example().apply {                                    summary = "Resposta de erro"                                    value = mapOf(                                        "codigo" to "500",                                        "mensagem" to "Um erro inesperado ocorreu.",                                        "detalhe_erro" to mapOf(                                            "app" to "Cartoes",                                            "tipo_erro" to "SERVICO_INDISPONIVEL",                                            "mensagem_interna" to "Tivemos um problema, mas fique tranquilo que nosso time já foi avisado."                                        )                                    )                                }                            )                        })                    }                })            }        }    }}